{"ast":null,"code":"var _jsxFileName = \"D:\\\\Semester 8\\\\Internship Project\\\\Credence Analytics\\\\Document Parser\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [docType, setDocType] = useState(\"travel ticket\");\n  const [output, setOutput] = useState(null);\n  const uploadFile = async () => {\n    if (!selectedFile) {\n      alert(\"Please select a file first!\");\n      return;\n    }\n    let formData = new FormData();\n    formData.append(\"file\", selectedFile);\n    formData.append(\"documentType\", docType);\n    try {\n      let response = await fetch(\"http://localhost:5000/uploads\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      let result = await response.json();\n      setOutput(result);\n    } catch (error) {\n      console.error(\"Upload Error:\", error);\n      alert(\"Failed to upload file! Check console.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload PDF for Parsing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: e => setSelectedFile(e.target.files[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: docType,\n      onChange: e => setDocType(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"travel ticket\",\n        children: \"Travel Ticket\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"invoice\",\n        children: \"Invoice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: uploadFile,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), output && /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(output, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"+RdzCUqtV9oPVi6a3kj03B4xMVE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","docType","setDocType","output","setOutput","uploadFile","alert","formData","FormData","append","response","fetch","method","body","ok","Error","status","result","json","error","console","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","files","value","onClick","JSON","stringify","_c","$RefreshReg$"],"sources":["D:/Semester 8/Internship Project/Credence Analytics/Document Parser/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction App() {\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n    const [docType, setDocType] = useState(\"travel ticket\");\r\n    const [output, setOutput] = useState(null);\r\n\r\n    const uploadFile = async () => {\r\n        if (!selectedFile) {\r\n            alert(\"Please select a file first!\");\r\n            return;\r\n        }\r\n\r\n        let formData = new FormData();\r\n        formData.append(\"file\", selectedFile);\r\n        formData.append(\"documentType\", docType);\r\n\r\n        try {\r\n            let response = await fetch(\"http://localhost:5000/uploads\", {\r\n                method: \"POST\",\r\n                body: formData\r\n            });\r\n        \r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n        \r\n            let result = await response.json();\r\n            setOutput(result);\r\n        } catch (error) {\r\n            console.error(\"Upload Error:\", error);\r\n            alert(\"Failed to upload file! Check console.\");\r\n        }\r\n        \r\n    };\r\n\r\n    return (\r\n        <div style={{ padding: \"20px\" }}>\r\n            <h1>Upload PDF for Parsing</h1>\r\n            <input type=\"file\" onChange={(e) => setSelectedFile(e.target.files[0])} />\r\n            <select value={docType} onChange={(e) => setDocType(e.target.value)}>\r\n                <option value=\"travel ticket\">Travel Ticket</option>\r\n                <option value=\"invoice\">Invoice</option>\r\n            </select>\r\n            <button onClick={uploadFile}>Upload</button>\r\n            {output && <pre>{JSON.stringify(output, null, 2)}</pre>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}